name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_MIN_STACK: 16777212

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            artifact-path: target/release/fend
            artifact-platform-name: linux-x64
            env-command: ">> $GITHUB_ENV"
          - platform: macos-latest
            artifact-path: target/release/fend
            artifact-platform-name: macos-x64
            env-command: ">> $GITHUB_ENV"
          - platform: windows-latest
            artifact-path: target/release/fend.exe
            artifact-platform-name: windows-x64
            env-command: "| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"

    runs-on: ${{ matrix.platform }}

    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2.4.0
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: Clippy
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-targets --all-features -- -D warnings

      - name: rustfmt
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
          cargo fmt -- --check

      - name: Build, get version
        run: |
          cargo build --release --workspace
          echo "FEND_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages | .[0].version')" ${{ matrix.env-command }}

      - name: Test
        run: |
          cargo test --workspace -- --nocapture --quiet

      - name: Run cargo-tarpaulin
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: "latest"
          args: "--workspace"

      - name: Upload to codecov.io
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v2.1.0

      - name: Strip binary
        if: ${{ matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest' }}
        run: |
          strip ${{ matrix.artifact-path }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2.3.1
        with:
          name: fend-${{ env.FEND_VERSION }}-${{ matrix.artifact-platform-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error

      - name: Build (Apple Silicon)
        if: ${{ matrix.platform == 'macos-latest' }}
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --workspace --target=aarch64-apple-darwin
          strip target/aarch64-apple-darwin/release/fend

      - name: Upload artifacts (Apple Silicon)
        uses: actions/upload-artifact@v2.3.1
        if: ${{ matrix.platform == 'macos-latest' }}
        with:
          name: fend-${{ env.FEND_VERSION }}-macos-aarch64
          path: target/aarch64-apple-darwin/release/fend
          if-no-files-found: error

      - name: Build (Raspberry Pi)
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        run: |
          rustup target add armv7-unknown-linux-gnueabihf
          sudo apt-get install -yq gcc-arm-linux-gnueabihf
          export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=/usr/bin/arm-linux-gnueabihf-gcc
          cargo build --release --workspace --target=armv7-unknown-linux-gnueabihf
          arm-linux-gnueabihf-strip target/armv7-unknown-linux-gnueabihf/release/fend

      - name: Upload artifacts (Raspberry Pi)
        uses: actions/upload-artifact@v2.3.1
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        with:
          name: fend-${{ env.FEND_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/armv7-unknown-linux-gnueabihf/release/fend
          if-no-files-found: error

      - name: Build fend-wasm
        if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' }}
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          (cd wasm && wasm-pack build --target no-modules --out-dir ../web/pkg)
          rm web/pkg/.gitignore

      - name: Upload Manual to Wiki
        if: ${{ github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' }}
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "wiki"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MY_TOKEN }}

      - name: Deploy to GitHub Pages
        if: ${{ github.repository == 'printfn/fend' && github.ref == 'refs/heads/main' && matrix.platform == 'ubuntu-latest' }}
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          personal_token: ${{ secrets.MY_TOKEN }}
          publish_dir: ./web
          external_repository: printfn/fend-website
          force_orphan: true
